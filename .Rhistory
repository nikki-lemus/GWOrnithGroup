tick
dpois(tick, 0.8636)
qpois(0.5, 0.8636) #finds the opposite, to be in the
qpois(50, 0.8636) #finds the opposite, to be in the
qpois(0.75, 0.8636) #finds the opposite, to be in the
qpois(0.25, 0.8636) #finds the opposite, to be in the 75th percentile you have to have 1 for example
dpois(0:15, 0.8636) #exact number of success occurs
88*dpois(0:15, 0.8636)
dpois(0, 0.8636)
lefties <- dbinom(x, 1035, 2.073429952)
lefties <- dbinom(0:1035, 1035, 2.073429952)
lefties <- dbinom(0:8, 1035, 2.073429952)
?binom
?dbinom
lefties <- dbinom(x, 1035, 0.259178744)
lefties <- dbinom(0:1035, 1035, 0.259178744)
lefties
plot(0:1035, lefties)
lefties <- 8/dbinom(0:1035, 1035, 0.259178744)
plot(0:1035, lefties)
lefties <- dbinom(0:1035, 1035, 0.259178744)
plot(0:1035, lefties)
lefties <- dbinom(0:8, 8, 0.259178744)
plot(0:8, lefties)
dbinom(0:8, 8, 0.259178744)
1035*dbinom(0:8, 8, 0.259178744)
plot(0:8, 1035*dbinom(0:8, 8, 0.259178744))
?dnorm
#mean is 1.5m and sd is 0.3m
wingspan <- dnorm(0:15, mean = 1.5, sd = 0.3)
plot(0:15, wingspan)
#mean is 1.5m and sd is 0.3m
wingspan <- dnorm(0:4, mean = 1.5, sd = 0.3)
plot(0:4, wingspan)
#mean is 1.5m and sd is 0.3m
wingspan <- dnorm(0:4, mean = 1.5, sd = 0.3, by = 0.1)
pnorm(2, mean = 1.5, sd = 0.3)
1 - pnorm(2, mean = 1.5, sd = 0.3) #because pnorm is only the left-hand side
dhyper(x = 10, m = 50, n = 50, k = 50) #x is number drawn that are marked,
dhyper(4, 20, 10, 20)
1000*dhyper(4, 20, 10, 20)
100000000000*dhyper(4, 20, 10, 20)
10000000000000000000000000*dhyper(4, 20, 10, 20)
1 - pnorm(2, mean = 1.5, sd = 0.3) #because pnorm is only the left-hand side
q()
1-pexp(5)
1-pexp(9)
1-pexp(2)
1-pexp(2, 8)
1-pexp(2, 0.1)
1-pexp(30, 0.1)
1-pexp(220, 0.0001)
1-pexp(225, 0.0001)
pexp(220, 0.0001)
pexp(222, 0.0001)
pexp(250, 0.0001)
1-pexp(225, 0.0001)
1-pexp(220, 0.0001)
1-pexp(120, 0.0001)
pexp(120, 0.0001)
pexp(124, 0.0001)
pexp(270, 0.01)
pexp(120, 0.01)
pexp(20, 0.01)
qbinom(0.95, 2, 0.5)
pbinom(2, 24, 0.5)
1-pbinom(2, 24, 0.5)
pbinom(2, 24, 0.012)
1-pbinom(2, 24, 0.012)
1-pbinom(2, 12, 0.012)
1-pbinom(2, 24, 0.012)
1-pbinom(1, 24, 0.012)
pbinom(1, 24, 0.012)
1-pbinom(3, 24, 0.012)
1-pbinom(2, 24, 0.012)
1-pbinom(2, 12, 0.012)
pbinom(0, 50, 0.012)
pbinom(1, 50, 0.05)
pbinom(0,50,0.05)
library(introgress)
install.packages(introgress)
install.packages("introgress")
library(introgress)
library(introgress)
library("introgress")
install.packages("introgress")
install.packages("introgress")
install.packages("devtools")
library(devtools)
install_url('https://cran.r-project.org/src/contrib/Archive/introgress/introgress_1.2.3.tar.gz')
library(introgress)
?LociDataSim1
?admix.gen
?prepare.data
install.packages("ggplot2")
library(ggplot2)
library(rgeoboundaries)
library(sf)
x11(fonts)
X11Fonts()
pbinom(1, 45000000, 0.00676)
pbinom(1, 45000000, 0.676)
pbinom(1, 450, 0.676)
sample(1:82, 10, replace=FALSE
iw;jfa;a
sample(1:82, 10, replace=FALSE
jawejasdf
jawejasdf
sample(1:82, 10, replace=FALSE
sample(1:82, 10
replace=FALSE
sample(1:82, 10
sample(1:82, 10,
replace=FALSE
)
sample(1:82, 10,
sample(1:82, 10,
sample(1:82, 10)
sample(1:82, 10)
list(1:5)
?sample
sample(1:82, 10, replace=FALSE) #sampling random 10 numbers between 1 and 82 without replacement
sample(
10:82, 10, replace=FALSE)
sample(
sample(10:82, 10, repalce=FALSE)
?read.csv
?sample
sample_com <- sample(1:82, 10, replace=FALSE)
sample_com
sample_com <- sample(1:82, 10, replace=FALSE)
sample_com
sample1_com <- sample(1:82, 10, replace=FALSE)
sample_com
raw = "id,dur.stay,age,sex,temp,wbc,antibiot
1,5,30,F,99,8,N
2,10,73,F,98,5,N
3,6,40,F,99,12,N
4,11,47,F,98.2,4,N
5,5,25,F,98.5,11,N
6,14,82,M,96.8,6,Y
7,30,60,M,99.5,8,Y
8,11,56,F,98.6,7,N
9,17,43,F,98,7,N
10,3,50,M,98,12,N
11,9,59,F,97.6,7,N
12,3,4,M,97.8,3,N
13,8,22,F,99.5,11,Y
14,8,33,F,98.4,14,Y
15,5,20,F,98.4,11,N
16,5,32,M,99,9,N
17,7,36,M,99.2,6,N
18,4,69,M,98,6,N
19,3,47,M,97,5,Y
20,7,22,M,98.2,6,N
21,9,11,M,98.2,10,N
22,11,19,M,98.6,14,Y
23,11,67,F,97.6,4,N
24,9,43,F,98.6,5,N
25,4,41,F,98,5,N"
fakefile = textConnection(raw)
data = read.csv(fakefile, header=TRUE)
print(data)
raw = "id,dur.stay,age,sex,temp,wbc,antibiot
1,5,30,F,99,8,N
2,10,73,F,98,5,N
3,6,40,F,99,12,N
4,11,47,F,98.2,4,N
5,5,25,F,98.5,11,N
6,14,82,M,96.8,6,Y
7,30,60,M,99.5,8,Y
8,11,56,F,98.6,7,N
9,17,43,F,98,7,N
10,3,50,M,98,12,N
11,9,59,F,97.6,7,N
12,3,4,M,97.8,3,N
13,8,22,F,99.5,11,Y
14,8,33,F,98.4,14,Y
15,5,20,F,98.4,11,N
16,5,32,M,99,9,N
17,7,36,M,99.2,6,N
18,4,69,M,98,6,N
19,3,47,M,97,5,Y
20,7,22,M,98.2,6,N
21,9,11,M,98.2,10,N
22,11,19,M,98.6,14,Y
23,11,67,F,97.6,4,N
24,9,43,F,98.6,5,N
25,4,41,F,98,5,N"
fakefile = textConnection(raw)
data = read.csv(fakefile, header=TRUE)
print(data)
View(data)
data$wbc
data$wbc>10
data$id[data$wbc >10]
data$id[data$wbc == 10]
raw = "id,dur.stay,age,sex,temp,wbc,antibiot
1,5,30,F,99,8,N
2,10,73,F,98,5,N
3,6,40,F,99,12,N
4,11,47,F,98.2,4,N
5,5,25,F,98.5,11,N
6,14,82,M,96.8,6,Y
7,30,60,M,99.5,8,Y
8,11,56,F,98.6,7,N
9,17,43,F,98,7,N
10,3,50,M,98,12,N
11,9,59,F,97.6,7,N
12,3,4,M,97.8,3,N
13,8,22,F,99.5,11,Y
14,8,33,F,98.4,14,Y
15,5,20,F,98.4,11,N
16,5,32,M,99,9,N
17,7,36,M,99.2,6,N
18,4,69,M,98,6,N
19,3,47,M,97,5,Y
20,7,22,M,98.2,6,N
21,9,11,M,98.2,10,N
22,11,19,M,98.6,14,Y
23,11,67,F,97.6,4,N
24,9,43,F,98.6,5,N
25,4,41,F,98,5,N"
fakefile = textConnection(raw)
data = read.csv(fakefile, header=TRUE)
print(data)
View(data)
data$age
data$age > 20
data$id[data$age>20]
data$id[data$age == 20]
x <- c(5.9, 6.2, 6.1, 5.7, 6.5, 5.5, 6.3)
mean(x)
sd(x)
sd(x)^2
mean(x)/sd(x)
sd(x)/mean(x)
raw = "id,dur.stay,age,sex,temp,wbc,antibiot
1,5,30,F,99,8,N
2,10,73,F,98,5,N
3,6,40,F,99,12,N
4,11,47,F,98.2,4,N
5,5,25,F,98.5,11,N
6,14,82,M,96.8,6,Y
7,30,60,M,99.5,8,Y
8,11,56,F,98.6,7,N
9,17,43,F,98,7,N
10,3,50,M,98,12,N
11,9,59,F,97.6,7,N
12,3,4,M,97.8,3,N
13,8,22,F,99.5,11,Y
14,8,33,F,98.4,14,Y
15,5,20,F,98.4,11,N
16,5,32,M,99,9,N
17,7,36,M,99.2,6,N
18,4,69,M,98,6,N
19,3,47,M,97,5,Y
20,7,22,M,98.2,6,N
21,9,11,M,98.2,10,N
22,11,19,M,98.6,14,Y
23,11,67,F,97.6,4,N
24,9,43,F,98.6,5,N
25,4,41,F,98,5,N"
fakefile = textConnection(raw)
data = read.csv(fakefile, header=TRUE)
print(data)
View(data)
raw = "id,dur.stay,age,sex,temp,wbc,antibiot
1,5,30,F,99,8,N
2,10,73,F,98,5,N
3,6,40,F,99,12,N
4,11,47,F,98.2,4,N
5,5,25,F,98.5,11,N
6,14,82,M,96.8,6,Y
7,30,60,M,99.5,8,Y
8,11,56,F,98.6,7,N
9,17,43,F,98,7,N
10,3,50,M,98,12,N
11,9,59,F,97.6,7,N
12,3,4,M,97.8,3,N
13,8,22,F,99.5,11,Y
14,8,33,F,98.4,14,Y
15,5,20,F,98.4,11,N
16,5,32,M,99,9,N
17,7,36,M,99.2,6,N
18,4,69,M,98,6,N
19,3,47,M,97,5,Y
20,7,22,M,98.2,6,N
21,9,11,M,98.2,10,N
22,11,19,M,98.6,14,Y
23,11,67,F,97.6,4,N
24,9,43,F,98.6,5,N
25,4,41,F,98,5,N"
fakefile = textConnection(raw)
data = read.csv(fakefile, header=TRUE)
print(data)''
hist(data$age, xlab="Age (years)")
boxplot(data$age, ylab="Age (years)")
boxplot(data$dur.stay, ylab="Stay duration (days)")
summary(data$dur.stay)
summary(data$age)
sd(data$age)
var(data$age)
plot(ecdf(data$temp), xlab="temp (F)", ylab="Cumul. Freq.", verticals=TRUE)
prop.table(table(data$antibiot))
boxplot(data$wbc[data$antibiot == "Y"], data$wbc[data$antibiot == "N"] )
data <- read.csv(url("https://phylo.bio.ku.edu/biostats/Lab3.csv"))
dat
data
d = data$s100
d = d[!is.na(d)]
d = data$s5
d = d[!is.na(d)]
d
require(pastecs)
stat.desc(d)
install.packages"pastecs"
install.packages"pastecs"
install.packages("pastecs")
require(pastecs)
stat.desc(d)
true.val = mean(data$pop)
pop.sd = sd(data$pop)
print(paste("true mean = ", true.val, ". sd =", pop.sd))
meanv = 0; sdv = 0;
r = subset(data, data$s1>0, select=2:27)
for (i in 1:26) {
samp = r[[i]] ;
meanv[i] = mean(samp) ;
sdv[i] = sd(samp) ;
}
n = 20
se.v = sdv/sqrt(n)
moe.v = 2*se.v
lower.ci.v = meanv - moe.v
upper.ci.v = meanv + moe.v
contains.true.val = lower.ci.v < true.val & true.val < upper.ci.v
print(paste(sum(contains.true.val), " of the 26 CIs contained the true mean"))
s.contains.true.val = 0
s.mean = 0
s.up = 0
s.lo = 0
s.n = 80
s.se = 0
reps = 1:100
for (i in reps) {
s.sample = sample(data$pop, s.n) ;
ms = mean(s.sample) ;
s.mean[i] = ms ;
s.se[i] = sd(s.sample)/sqrt(s.n) ;
s.up[i] = ms + 2*s.se[i] ;
s.lo[i] = ms - 2*s.se[i] ;
s.contains.true.val[i] = s.lo[i] < true.val & true.val < s.up[i]
}
print(paste(sum(s.contains.true.val), " of the 100 CIs contained the true mean"))
# plot each mean against its rep number
plot(reps, s.mean, ylim=c(min(s.lo), max(s.up)), ylab="mean", xlab="sim. rep. #")
# we already figured which CIs overlap with the true value, and plot those segments.
excl = !s.contains.true.val
segments(reps[excl], s.lo[excl], reps[excl], s.up[excl])
# we can make a line corresponding to the y-intercept of the true value with slope=0
abline(a=true.val, b=0)
s.mean
se(s.mean)
sd(s.mean)
sd(s.mean)/10
print(s.se)
sd(s.mean)/sqrt(80)
?sdv
install.packages("pastecs")
load("pastecs")
require("pastecs")
x <- 4
x
x + 5
y <- c(2,4,6,8)
y
y[3]
y[1]
x <- 4
x
x + 5
y <- c(2,4,6,8\)
y <- c(2,4,6,8)
y
y[1]
y[3]
pchisq(158.97, df=1, lower.tail=FALSE)
?qchisq
qchisq(0.05, 1)
pchisq(188, df=1, lower.tail=FALSE)
domain = 0:20
null.dist = dbinom(domain, 20, 0.65)
print(paste(c("The null distribution is: ", null.dist)))
barplot(null.dist, names.arg=domain)
dbinom(0:20, 20, 0.65)
pbinom(0, 20, 0.65)
sum(null.dist)
expected = n*p
n = 20
expected = n*p
p = 0.65
expected = n*p
print(paste(c("The expected value under the null is: ", expected)))
obs.diff = 8 - expected
print(paste("The difference between the observed and the expected was", obs.diff))
as.extreme = abs(domain - expected) >= abs(obs.diff)
print("The tails of the distribution will correspond to TRUE values:")
print(as.extreme)
col = c("white", "red")
x.col = col[1 + as.numeric(as.extreme)]
barplot(null.dist, names.arg=domain, col=x.col)
prob.as.extreme = sum(null.dist[as.extreme])
print(paste("If the null is true, the prob. of a result at least as extreme as",
x, "is", prob.as.extreme))
prob.as.extreme = sum(null.dist[as.extreme])
print(paste("If the null is true, the prob. of a result at least as extreme as",
8, "is", prob.as.extreme))
pbinom(8, 20, 0.65)
?pbinom
pbinom(8, 20, 0.65, lower.tail = FALSE)
pbinom(8, 20, 0.65)
pbinom(17, 20, 0.65)
pbinom(17, 20, 0.65, lower.tail = FALSE)
pbinom(8, 20, 0.65) + pbinom(17,20,0.65, lower.tail=FALSE)
?ln
cl <- log(0.144912) #change on long
cl <- 0.144912 #change on long
cs <- 0.009803 #change on short
log(cl*cs)
log(cl)+log(cs)
log((cl*cs)+(cl*cs))
#all multiplied by 1/4 for the starting frequencies of the root state
#taking the natural log for ease when using very small numbers
IS1 <- log((cl^2)(cs^3)/4) #a change occurs on every branch, this can happen 3 times (T-C, G-T, and G-C)
#all multiplied by 1/4 for the starting frequencies of the root state
#taking the natural log for ease when using very small numbers
IS1 <- (cl^2)(cs^3)/4 #a change occurs on every branch, this can happen 3 times (T-C, G-T, and G-C)
#all multiplied by 1/4 for the starting frequencies of the root state
#taking the natural log for ease when using very small numbers
IS1 <- log((cl^2)*(cs^3)/4) #a change occurs on every branch, this can happen 3 times (T-C, G-T, and G-C)
IS2 <- log((nl^2)*(cs^3)/4) #changes only occur on short branches, only possible with the internal state C-G
nl <- 0.565263 #no change on long
ns <- 0.970592 #no change on short
IS2 <- log((nl^2)*(cs^3)/4) #changes only occur on short branches, only possible with the internal state C-G
IS3 <- log((cl^2)*(ns^3)/4) #changes only occur on long branches, only 1 time
IS4 <- log((cl^2)*(ns)*(cs^2)/4) #5 times
IS5 <- log((cl)*(nl)*(ns)*(cs^2)/4) #4 times
IS6 <- log((cl)*(nl)*(cs^3)/4) #2 times
likelihood = 3*(IS1)+1*(IS2)+1*(IS3)+5*(IS4)+4*(IS5)+2*(IS6)
?chisq.test
my_var <- "hello"
my_var + my_var
c(107, 108, 109)
expected.class.p = dbinom(0:7, size=7, p=0.6);
expected.class.n = 1000*expected.class.p ;
print("The expected numbers in each category are:"); print(expected.class.n);
chisq.test(x=s$n.classes, p=expected.class.p) ;
?dbinom
dbinom(1, 7, 0.5)
dbinom(3, 7, 0.5)
dbinom(0, 7, 0.5)
dbinom(4, 7, 0.5)
data.vec = c(2, 4, 20, 8, 9, 1, 7, 9, 7)
data.vec
observed = matrix(data.vec, 3, 3, byrow=TRUE)
observed
row.sum = c() ;
col.sum = c() ;
for (i in 1:3) {
row.sum[i] = sum(observed[i,]) ;
col.sum[i] = sum(observed[,i]) ;
}
row.sum
row.sum=c()
row.sum
1:3
1:7
for (fruit in c("banana", "apple", "orange")) {
print(fruit)
}
for (fruit in c(banna, apple, orange)){
print(fruit)
}
for (fruit in c("banana", "apple", "orange"")){
}
for (fruit in c("banana", "apple", "orange"")){
print(fruit)
}
for (fruit in c("banana", "apple", "orange")){
print(fruit)
}
for (i in 1:5){
print("this will repeat 5 times")
}
setwd("C:/Users/tangl/OneDrive/Documents/KU/Fall2024/GitHubWorkshop/GW_ornith_group")
data<-read.csv("resurvey_specimen_inventory_DELETE - Inventory.csv")
View(data)
#set working directory
setwd("C:/Users/Alex/OneDrive/Documents/KU/Fall2024/GitHubWorkshop/GW_ornith_group")
setwd("~/KU/Fall2024/GitHubWorkshop/GW_ornith_group")
#set working directory
setwd("~/KU/Fall2024/GitHubWorkshop/GW_ornith_group")
#read in sampling file
#columns named Latitude, Longitude, and species are of interest
data <- read.csv("./resurvey_data.csv")
library(rgeoboundaries)
install.packages("rgeoboundaries")
library("rgeoboundaries")
#get map of Kansas from rgeoboundaries
kansas <- geoboundaries("Kansas")
?geoboundaries
